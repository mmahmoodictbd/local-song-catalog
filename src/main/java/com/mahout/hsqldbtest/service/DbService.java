package com.mahout.hsqldbtest.service;

import java.io.File;
import java.sql.SQLException;
import java.util.Properties;

import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.QueryRunner;
import org.hsqldb.jdbc.JDBCDataSource;
import org.hsqldb.persist.LockFile;

import com.google.inject.Singleton;
import com.google.inject.persist.Transactional;

@Singleton
public class DbService {

	private static String DRIVER_CLASS_NAME = "org.hsqldb.jdbcDriver";
	private static String URL = "jdbc:hsqldb:file:db/myDb;create=true";
	private static String USERNAME = "sa";
	private static String PASSWORD = "";
	private static QueryRunner qRunner = null;

	public DbService() {
		initDb();
	}

	public void initDb() {

		if (LockFile.isLocked("db/myDb.lck")) {
			File lockFile = new File("db/myDb.lck");
			if (lockFile.exists()) {
				lockFile.delete();
			}
		}

		DbUtils.loadDriver(DRIVER_CLASS_NAME);

		Properties properties = new Properties();
		properties.setProperty("hsqldb.lock_file", "true");

		JDBCDataSource ds = new JDBCDataSource();
		ds.setUrl(URL);
		ds.setUser(USERNAME);
		ds.setPassword(PASSWORD);
		ds.setProperties(properties);

		qRunner = new QueryRunner(ds);

		createTables();
		System.out.println("initDb() [runnig...]");

	}

	public QueryRunner getQueryRunner() {
		return qRunner;
	}

	@Transactional
	private void createTables() {
		createSongTable();
		createOrphanedSongTable();
	}

	private void createSongTable() {
		String createSongTableSQL = "create table Song ("
				+ " id int GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL, fileName varchar(256),"
				+ " canonicalPath varchar(1024) not null," + " lastModified BIGINT not null, fileSize BIGINT not null,"
				+ " infoMD5String varchar(32), tags varchar(1024), playliststags varchar(1024), lyrics varchar(1024))";

		try {
			qRunner.update(createSongTableSQL);
		} catch (SQLException e) {
			System.out.println("Table [Song] already exist.");
		}
	}

	private void createOrphanedSongTable() {
		String createOrphanedSongTableSQL = "create table OrphanedSong ("
				+ " id int GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL, fileName varchar(256),"
				+ " canonicalPath varchar(1024) not null," + " lastModified BIGINT not null, fileSize BIGINT not null,"
				+ " infoMD5String varchar(32), tags varchar(1024), playliststags varchar(1024), lyrics varchar(1024))";

		try {
			qRunner.update(createOrphanedSongTableSQL);
		} catch (SQLException e) {
			System.out.println("Table [OrphanedSong] already exist.");
		}
	}
}
